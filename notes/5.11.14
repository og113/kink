plans to get V2 working on c++ side:
	DONE - program to find epsilon given dE
		- while test>closeness
		- find roots of dV, with an initial guess for epsilon
		- find zero of V(root[2])-V(root[0])-dE as a function of epsilon
		- find new roots of V with new value for epsilon
		- evaluate new dE
		- test=(newdE-dE)/dE
		- end while, assign new minima, new epsilon and new dE
	DONE - program to find S1
		- S1 is the integral of (2V)^0.5 between the minima, use the degenerate minima case
		- use S1 program to get R
	- program to find phi to input, the generalisation of the tanh
		- phi just goes between root[0] and root[2]
		- the thing to work out is how rho varies, integrand is (2V)^-0.5
		- write a phi vector of steps between root[0] and root[2]
		- write rho vector of same length and get rho[i] by integrating phi between phi[i] and 0
	- will need an alphaL and alphaR
	- in pi.cc assign values of phi depending on how close rho, or rho1, rho2 etc are to the rho[i] from the previous program
